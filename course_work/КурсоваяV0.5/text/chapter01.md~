# Построение виртуальной сети с помощью Mininet

## Общие сведения

$\quad$Mininet [@mininet] --- это виртуальная среда, которая позволяет разрабатывать и тестировать сетевые инструменты и протоколы. В сетях Mininet работают реальные сетевые приложения Unix/Linux, а также реальное ядро Linux и сетевой стек. С помощью одной команды Mininet может создать виртуальную сеть на любом типе машины, будь то виртуальная машина, размещенная в облаке или же собственный персональный компьютер. Это дает значительные плюсы при тестировании работоспособности протоколов или сетевых программ:

  - Быстро создавать прототипы программно-определяемых сетей.
  - Тестирование не требует экспериментов в реальной сетевой среде, вследствие чего разработка ведется быстрее.
  - Тестирование в сложных сетевых топологиях обходится без необходимости покупать дорогое оборудование.
  - Виртуальный эксперимент приближен к реальному, так как Mininet запускает код на реальном ядре Linux.
  - Работать нескольким разработчикам в одной топологией независимо.

Машины (хосты) в сети создаются по образу машины, которая запускает Mininet, со всеми вытекающими обстоятельствами. Например, если количество памяти, допустимое для буфера передачи сокета TCP, на рабочей машине равно, условно, значению 4096, то и на виртуальной машине это значение будет равно 4096. Изменение конфигурации на машине в виртуальной сети не вносит изменений в конфигурацию рабочей машины.

## Установка Mininet

### Указания к установке

Описание выполнения установки приведено для техники со следующими характеристиками:

  - ОС ubuntu-20.04.3
  - AMD Ryzen 7 3700X 3600 MHz, 4Гб оперативной памяти, 20Гб свободно на SSD.

### Процесс установки

1. Перейдем на сайт mininet.org.

2. Перейдем в раздел Download и выберем режим установки mininet. Mininet дает нам 3 опции по установке: установка образа посредством github, установка из исходного кода на ПК или установка пакетом для ubuntu посредством apt. Мы выбрали 2-й вариант установки.

3. Установим исходный код программы mininet и перейдем в установленную директорию при помощи команды

\begin{minted}[breaklines]{bash}
git clone git://github.com/mininet/mininet && cd mininet
\end{minted}

4. Произведем установку программы mininet при помощи команды

\begin{minted}[breaklines]{bash}
./util/install.sh -a
\end{minted}


  Опция -a в команде означает, что мы хотим установить программу полностью со всеми зависимостями (например POX, Open vSwitch, OpenFlow).

  После установки в директории /usr/local/lib/pythonV/dist-packages появится директория miniet.

5. Если в ходе установки не возникло ошибок, то мы можем запустить Mininet и проверить ее работоспособность при помощи команды

  \begin{minted}[breaklines]{bash}
  sudo mn
  \end{minted}

  Вывод команды приведен на рис. [-@fig:0001].

![Запуск Mininet](mininet_1.5.png){ #fig:0001 width=70% }

  Mininet требует права суперпользователя для запуска.


6. Удалим исходный код программы командой

\begin{minted}[breaklines]{bash}
rm -rf mininet
\end{minted}

## Работа с программой Mininet

$\quad$После запуска Mininet посредством команды **sudo mn** у нас создастся простая сеть с хостами h1 и h2 и коммутатором s1, который соединяет хосты между собой. Также, хостам были присвоены ip-адреса (10.0.0.1 для h1 и 10.0.0.2 для h2). Мы можем проверить достижимость сетевых компонентов с помощью команды **h1 ping h2** посредством CLI или же запустить терминал для хоста, например, h1 и выполнять всю работу из терминала, как на реальном устройстве. Запуск терминала осуществляется командой xterm h1 из CLI.

Проверим достижимость h2 для h1 из терминала можно с помощью команды **ping** (рис. [-@fig:0002]). 

![Проверка достижимости h2 для h1](mininet_2.2.png){ #fig:0002 width=70% }

Узнать список доступных команд Mininet можно в CLI с помощью команды **help**.

## MiniEdit

$\quad$Mininet предоставляет графический интерфейс управления виртуальной сетью --- MiniEdit. MiniEdit --- программа, написанная на языке программирования Python, которая является надстройкой над mn и позволяет управлять сетью в удобном для пользователя виде. Данная программа расположена в директории examples исходных файлов mininet. В моем случае это директория /usr/local/lib/python3.8/dist-packages/mininet/examples/miniedit.py.

Создадим простую топологию из двух хостов и коммутатора в MiniEdit.

1. Запустим Miniedit из директории /usr/local/lib/python3.8/dist-packages/mininet/examples/miniedit.py.

\begin{minted}[breaklines]{bash}
sudo python3 /usr/local/lib/python3.8/dist-packages/mininet/examples/miniedit.py
\end{minted}

2. Создадим 2 хоста, выбрав иконку терминала и кликнув по рабочей области 2 раза. Имена для хостов присваиваются автоматически.

3. Кликнув правой кнопкой мыши по хосту и выбрав раздел Properties, зададим в поле Ip Adress адреса 10.0.0.1 и 10.0.0.2 соответственно (рис. [-@fig:0003]).

![Редактирование конфигурации хостов сети](mininet_2.3.png){ #fig:0003 width=70% }

4. Добавим в рабочую область коммутатор, выбрав элемент LegacySwitch.

5. Выберем элемент NetLink и соединим элементы сети (рис. [-@fig:0004]).

![Соединение элементов сети](mininet_2.4.png){ #fig:0004 width=70% }

6. Запустим сеть нажав на кнопку Run.

7. Откроем терминал первого хоста, нажав правой кнопкой мыши по хосту и выбрав пункт Terminal. Отправим ping второму хосту (рис. [-@fig:0005]).

![Проверка достижимости h2 для h1](mininet_2.5.png){ #fig:0005 width=70% }
