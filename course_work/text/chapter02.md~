# Генерация и измерение сетевого трафика с помощью утилиты iPerf3

## Общие сведения

$\quad$iPerf3 [@iperf] --- кроссплатформенная консольная клиент-серверная программа-генератор TCP, UDP и SCTP трафика для тестирования пропускной способности сети. По умолчанию тест выполняется в направлении от клиента к серверу. Для выполнения тестирования программа должна быть запущена на двух устройствах (это могут быть как компьютеры, так и смартфоны, планшеты). Одно из них будет выполнять роль сервера, а другое роль клиента. Между ними и будет происходить передача данных для измерения пропускной способности соединения.

## Тестирование пропускной способности с помощью iPerf3

$\quad$Для запуска сервера iPerf требуется выполнить следующую команду

\begin{minted}[breaklines]{bash}
iPerf3 -s [параметры]
\end{minted}

Список параметров для сервера: 

- -D, --daemon              (запуск сервера как процесс демон)
- -I, --pidfile file        (ведется запись в PID-файл)
- -1, --one-off             (после обслуживания 1 клиента работа сервера прекращается)


Для запуска iPerf-клиента требуется выполнить следующую команду

\begin{minted}[breaklines]{bash}
iPerf3 -c server_ip [параметры]
\end{minted}

Список параметров для клиента: 

- -u, --udp       (используется)
- -b, --bandwidth  (указывает пропускную способность)
- -t, --time  (время передачи)
- -n, --bytes     (количество байтов для передачи)
- -k, --blockcount   (количество блоков данных для передачи)
- -l, --len           (размер буфера для передачи/приема)
- -cport            (указание порта передачи для клиента)
- -P, --parallel          (количество потоков передачи)
- -R, --reverse             (указание поменять сервер и клиент местами)
- -w, --window              (изменение размера окна TCP)
- -M, --set-mss             (изменение максимального размера сегмента)
- -N, --no-delay            (удалить задержку в TCP/SCTP)
- -4, --version4            (использовать только ipv4)
- -6, --version6            (использовать только ipv6)
- -S, --tos N               (установить тип услуги)
- -Z, --zerocopy            (использовать метод отправки данных с нулевой копией)
- -O, --omit N              (опустить первые n секунд передачи при статистике)
- -T, --title str           (префикс каждой выходной строки с этой строкой)
- -get-server-output       (получение результатов от сервера)
- --udp-counters-64bit     (использовать 64-битные счетчики в тестовых пакетах UDP)


Общие параметры для сервера и клиента:

- -p, --port              (порт для прослушивания)
- -f, --format     (формат статистики: Мбит, Кбит ...)
- -i, --interval            (интервалы между замерами)
- -F, --file name            (xmit/recv файл)
- -B, --bind          (связать определенный интерфейс)
- -V, --verbose              (более детальная статистика)
- -J, --json             (вывод статистики в json- файл)
- --logfile f            (отправить данные в лог-файл)
- -d, --debug              (выдать отладочную информацию)
- -v, --version             (показать версию программы и выйти)
- -h, --help                 (показать help-информацию и выйти)

Проведем тестирование сети в Mininet.

1. Запустим MiniEdit.
2. Создадим 2 хоста (h1 и h2) и коммутатор (s1).
3. Соединим элементы сети. 
4. Запустим сеть (рис. [-@fig:0011]). 

![Сеть с простой топологией в Mininet](iperf_1.png){ #fig:0011 width=70% }

5. Запустим iPerf-сервер на h2. 

\begin{minted}[breaklines]{bash}
iper3 -s
\end{minted}

6. Запустим iPerf-клиент на хосте h1 на 60 секунд, пропустив первые 10 секунд для статистики (рис. [-@fig:0012]).

\begin{minted}[breaklines]{bash}
iPerf3 -c 10.0.0.2 -t 60 -O 10
\end{minted}

![Запуск iPerf-клиента](iperf_3.png){ #fig:0012 width=70% }

7. Просмотрим статистику, которую сгенерировал iPerf (рис. [-@fig:0013]). 

![Вывод статистики iPerf3](iperf_4.png){ #fig:0013 width=70% }


## Построение графиков сетевых характеристик

$\quad$iPerf3 предоставляет нам обширные количество данных, которые можно исследовать. Наиболее удобным представлением данных сетевых характеристик является графическое представление.

Для того, чтобы построить графики воспользуемся самописным скриптом plotter.py, который подробно рассмотрен в [Приложении А](#appendix1). Данный скрипт обрабатывает файл json, который мы получаем в iPerf3, и на основе него строит графики.

Визуализируем данные сетевой статистики.

1. Воспользуемся виртуальной сетью из прошлой главы. 
2. Запустим iPerf-сервер на хосте h2.
3. Запустим iPerf3-клиент на хосте h1 с параметром -J, который формирует json-файл со статистикой.

\begin{minted}[breaklines]{bash}
iPerf3 -c 10.0.0.2 -t 60 -J > data.json
\end{minted}

4. Дождемся окончания передачи данных и запустим скрипт из [Приложения А](#appendix1).

\begin{minted}[breaklines]{bash}
./plotter.py -i data.json
\end{minted}

  В результате выполнения скрипта создается директория monitoring, в которой находятся все статистические данных iPerf.

5. Рассмотрим полученные графики.

- bytes.pdf --- график, который показывает значение переданных данных в некоторый момент времени (рис. [-@fig:0014]).

![График изменения количества переданных данных с течением времени](iperf_bytes.png){ #fig:0014 width=70% }

- cwnd.pdf --- график, который показывает значение окна перегрузки (рис. [-@fig:0015]).

![График изменения значения окна перегрузки с течением времени при использовании алгоритма TCP Cubic](iperf_cwnd.png){ #fig:0015 width=70% }

- MTU.pdf --- график значения максимальной длины пакета (рис. [-@fig:0016]). Видим, что значение mtu --- константа, которая равна 1500 байт.

![График изменения значения длины пакета с течением времени](iperf_MTU.png){ #fig:0016 width=70% }

- retransmits.pdf --- график значения количества повторно переданных пакетов. Данный график нам не интересен, так как рассматривается сеть, в которой пакеты не теряются.

- rtt.pdf (рис. [-@fig:0017]) --- график значения RTT (в миллисекундах).

![График изменения значения RTT с течением времени](iperf_rtt.png){ #fig:0017 width=70% }

- rttvar.pdf --- график изменения RTT (рис. [-@fig:0018]). Видим, что RTT достаточно резко повышается и понижается в некоторых промежутках времени.

![График изменения значения вариации RTT с течением времени](iperf_rttvar.png){ #fig:0018 width=70% }

- throughput.pdf --- график значения пропускной способности (рис. [-@fig:0019]). Видим, что значение достаточно высоко, так как данные передаются с максимально допустимой скорость передачи на интерфейсе. Данной пропускной способности невозможно добиться в реальных сетях, по крайней мере в момент написания работы.

![График изменения значения пропускной способности с течением времени](iperf_throughput.png){ #fig:0019 width=70% }